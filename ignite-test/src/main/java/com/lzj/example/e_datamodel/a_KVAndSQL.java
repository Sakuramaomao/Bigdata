package com.lzj.example.e_datamodel;

/**
 * <pre>
 *  数据建模
 *   * 数据的存储方式
 *   （1）物理层
 *      每个数据条目都以”二进制对象“的方式存储。
 *      整个数据集被划分为多个较小的集合，称为”分区“。分区均匀的分布在所有节点上。
 *      数据和分区之间以及节点和分区之间通过”关联函数“控制。
 *   （2）逻辑层
 *      使用易于使用的方式展示。
 *      a、KV缓存
 *      b、SQL表（模式）
 *          虽然这两种方式看起来不同，但是在Ignite中，SQL表和KV缓存是相同数据结构的两个等效表示。并且可以表示同一组数据！
 *      可以使用KV API或SQL语句或同时使用两者来访问数据。
 *          KV缓存是键值对的集合，可以通过KV API对其访问。
 *          Ignite中的SQL表与传统关系型数据库中表的概念相对应，但有一个附加条件。比如每个SQL表必须包含一个主键。
 *      具有主键的表可以表示未KV缓存。其中，主键列用作Key，其余的表列代表对象的字段值。
 *          他们之间的区别就是KV缓存使用相应API来访问，SQL表则使用SQL语法进行访问。可以根据业务需求灵活使用其中一种或者
 *      同时使用两种。
 *
 *
 * </pre>
 *
 * @Author zj.li
 * @Date 2021/3/24 18:30
 **/
public class a_KVAndSQL {
    public static void main(String[] args) {

    }
}
